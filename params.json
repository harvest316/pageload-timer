{
  "name": "Pageload-Timer",
  "tagline": "Downloads a given list of web pages, and returns an array of their pageload latencies in milliseconds.",
  "body": "Pageload-Timer\r\n==============\r\n> A web service template written in NodeJS with the Express.js web framework.\r\n> Downloads a given list of web pages, and returns an array of their pageload latencies in milliseconds.\r\n> Demonstrates various development best practices, including self-documenting BDD unit tests in Mocha Chai & Expect.js.\r\n> Continuously Deployed on Heroku ExpressJS with Grunt & Travis CI.\r\n\r\n[![Build Status](https://travis-ci.org/harvest316/pageload-timer.png?branch=master)](https://travis-ci.org/harvest316/pageload-timer) \r\n[![Coverage Status](https://coveralls.io/repos/github/harvest316/pageload-timer/badge.svg?branch=master)](https://coveralls.io/github/harvest316/pageload-timer?branch=master)\r\n\r\n## Sample Request\r\n```json\r\n{\r\n    \"payload\": [\r\n            \"http://www.google.com\",\r\n            \"https://www.facebook.com:443\",\r\n            \"https://twitter.com\",\r\n            \"http://www.xkcd.com/443?foo=bar\"\r\n    ]\r\n}\r\n```\r\n\r\n## Sample Response\r\n```json\r\n{\r\n    \"response\": [\r\n        {\r\n            \"url\": \"http://www.google.com\",\r\n            \"latency_ms\": 3210\r\n        },\r\n        {\r\n            \"url\": \"https://www.facebook.com:443\",\r\n            \"latency_ms\": 1232\r\n        },\r\n        {\r\n            \"url\": \"https://twitter.com\",\r\n            \"latency_ms\": 315\r\n        },\r\n        {\r\n            \"url\": \"http://www.xkcd.com/443?foo=bar\",\r\n            \"latency_ms\": 132\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## Object Diagram\r\n![alt tag](https://cdn.rawgit.com/harvest316/pageload-timer/master/pageload-timer.svg)\r\n\r\n\r\n## Installation\r\n\r\nDownload node at [nodejs.org](http://nodejs.org) and install it, if you haven't already.\r\n\r\n```sh\r\nnpm install pageload-timer --save\r\n```\r\n\r\n\r\n## Tests\r\n\r\n```\r\n  The Pageload Timer Web Service: \r\n    √ Should Return 4 Valid Timing Records Given Sample Request (2802ms)\r\n    √ Should Return Single Response Given Single Existing URL (1788ms)\r\n    √ Should Return 404 Not Found Given Well-Formed Non-Existing URL (387ms)\r\n    √ Should Return 404 Not Found Given Invalid TLD (383ms)\r\n    √ Should Return 400 Parse Error Given Invalid Schema\r\n    √ Should Return 400 Parse Error Given Invalid MIME Type\r\n    √ Should Return 400 Parse Error Given Non-JSON Request\r\n    √ Should Return 404 Not Found Given Invalid POST Path\r\n    √ Should Return 400 Parse Error Given Missing Request\r\n    √ Should Return 400 Parse Error Given Null Request\r\n    √ Should Return 400 Parse Error Given Empty JSON Request\r\n    √ Should Return 400 Parse Error Given Empty String Request\r\n    √ Should Return 400 Parse Error Given Empty Payload\r\n  The Test Data: \r\n    √ sampleRequest Should Return 4 String Elements\r\n    √ Request.isValid Should Return True Given sampleRequest\r\n    √ Request.isValid Should Return False Given emptyRequest\r\n    √ Response.isValid Should Return True Given sampleResponse\r\n    √ Response.isValid Should Return False Given emptyResponse\r\n    √ sampleResponse Should Contain Same URLs As sampleRequest\r\n  19 passing (5s)\r\n\r\n```\r\n\r\n## Documentation\r\nSystem Internals are documented using [JSDoc here](https://cdn.rawgit.com/harvest316/pageload-timer/master/doc/index.html).\r\n\r\n## Dependencies\r\n\r\n- [async](https://github.com/caolan/async): Higher-order functions and common patterns for asynchronous code\r\n- [body-parser](https://github.com/expressjs/body-parser): Node.js body parsing middleware\r\n- [express](https://github.com/expressjs/express): Fast, unopinionated, minimalist web framework\r\n- [pagelt](https://github.com/zrrrzzt/pagelt): Measure time to load a page\r\n- [superagent](https://github.com/visionmedia/superagent): elegant &amp; feature rich browser / node HTTP with a fluent API\r\n- [underscore](https://github.com/jashkenas/underscore): JavaScript&#39;s functional programming helper library.\r\n- [valid-url](https://github.com/ogt/valid-url): URI validation functions\r\n- [winston](https://github.com/winstonjs/winston): A multi-transport async logging library for Node.js\r\n- [winston-daily-rotate-file](https://github.com/winstonjs/winston-daily-rotate-file): A transport for winston which logs to a rotating file each day.\r\n\r\n## Dev Dependencies\r\n\r\n- [accepts](https://github.com/jshttp/accepts): Higher-level content negotiation\r\n- [chai](https://github.com/chaijs/chai): BDD/TDD assertion library for node.js and the browser. Test framework agnostic.\r\n- [chai-json-schema](https://github.com/Bartvds/chai-json-schema): Chai plugin for JSON Schema v4\r\n- [debug](https://github.com/visionmedia/debug): small debugging utility\r\n- [expect.js](https://github.com/LearnBoost/expect.js): BDD style assertions for node and the browser.\r\n- [grunt](https://github.com/gruntjs/grunt): The JavaScript Task Runner\r\n- [grunt-contrib-jshint](https://github.com/gruntjs/grunt-contrib-jshint): Validate files with JSHint\r\n- [grunt-env](https://github.com/jsoverson/grunt-env): Specify an ENV configuration for future tasks in the chain\r\n- [grunt-exec](https://github.com/jharding/grunt-exec): Grunt task for executing shell commands.\r\n- [grunt-jsdoc](https://github.com/krampstudio/grunt-jsdoc): Integrates jsdoc3 generation into your Grunt build\r\n- [grunt-simple-mocha](https://github.com/yaymukund/grunt-simple-mocha): A simple wrapper for running tests with Mocha.\r\n- [jsdoc](https://github.com/jsdoc3/jsdoc): An API documentation generator for JavaScript.\r\n- [mocha](https://github.com/mochajs/mocha): simple, flexible, fun test framework\r\n- [superagent](https://github.com/visionmedia/superagent): elegant &amp; feature rich browser / node HTTP with a fluent API\r\n\r\n\r\n## License\r\n\r\nMIT\r\n\r\n_Generated by [package-json-to-readme](https://github.com/zeke/package-json-to-readme)_\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}